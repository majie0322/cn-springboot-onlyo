<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation=
               "http://www.springframework.org/schema/beans
               http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--1. 配置 SecurityManager!-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager"/>
        <property name="authenticator" ref="authenticator"></property>

        <property name="realms">
            <list>
                <ref bean="jdbcRealm"/>
                <ref bean="secondRealm"/>
            </list>
        </property>
<!--
        <property name="rememberMeManager.cookie.maxAge" value="10"></property>
-->
    </bean>

    <!--
   2. 配置 CacheManager.
   2.1 需要加入 ehcache 的 jar 包及配置文件.
   -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">

        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
    </bean>

    <bean id="authenticator"
          class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">

        <!--  认证策略-->
        <property name="authenticationStrategy">
            <bean class="org.apache.shiro.authc.pam.FirstSuccessfulStrategy"></bean>
        </property>
    </bean>

    <!--
    3. 配置 Realm
    3.1 直接配置实现了 org.apache.shiro.realm.Realm 接口的 bean
    -->
    <bean id="jdbcRealm" class="cn.boot.onlyo.shiro.ShiroRealm">
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="MD5"></property>
                <!-- 加密次数-->
                <property name="hashIterations" value="1024"></property>
            </bean>
        </property>
    </bean>
    <bean id="secondRealm" class="cn.boot.onlyo.shiro.SecondRealm">
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="SHA1"></property>
                <!-- 加密次数-->
                <property name="hashIterations" value="1024"></property>
            </bean>
        </property>
    </bean>


    <!--4. 配置 LifecycleBeanPostProcessor. 可以自定的来调用配置在
Spring IOC 容器中 shiro bean 的生命周期方法.-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!--5. 启用 IOC 容器中使用 shiro 的注解. 但必须在配置了 LifecycleBeanPostProcessor 之后才可以使用.-->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
    <!--
  6. 配置 ShiroFilter.
  6.1 id 必须和 web.xml 文件中配置的 DelegatingFilterProxy 的 <filter-name> 一致.
                    若不一致, 则会抛出: NoSuchBeanDefinitionException. 因为 Shiro 会来 IOC 容器中查找和 <filter-name> 名字对应的 filter bean.
  -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/shiro/t1"/>
        <property name="successUrl" value="/view/list.jsp"/>
        <property name="unauthorizedUrl" value="/view/unauthorized.jsp"/>
        <!--
            <property name="filterChainDefinitionMap" ref="filterChainDefinitionMap"></property>
        -->
        <!--
       配置哪些页面需要受保护. (
       ?:匹配一个字符 *匹配零个或多个字符串 ** 匹配路径中的零个或多个路径
        value 里面越往前越优先)
       以及访问这些页面需要的权限.
       1). anon 可以被匿名访问
       2). authc 必须认证(即登录)后才可能访问的页面.
       3). logout 登出.
       4). roles 角色过滤器
   -->
        <property name="filterChainDefinitionMap" ref="filterChainDefinitionMap"></property>

<!--        <property name="filterChainDefinitions">
            <value>
                /login.jsp = anon
                /shiro/login = anon
                /shiro/logout = logout
                /user.jsp = roles[user]
                /admin.jsp = roles[admin]
                # everything else requires authentication:
                /** = authc
            </value>
        </property>-->
    </bean>

       <!-- 配置一个 bean, 该 bean 实际上是一个 Map. 通过实例工厂方法的方式 -->
       <bean id="filterChainDefinitionMap"
             factory-bean="filterChainDefinitionMapBuilder" factory-method="buildFilterChainDefinitionMap"></bean>

      <bean id="filterChainDefinitionMapBuilder"
             class="cn.boot.onlyo.shiro.factory.FilterChainDefinitionMapBuilder"></bean>
    <!--
           <bean id="shiroService"
                 class="com.atguigu.shiro.services.ShiroService"></bean>-->

</beans>